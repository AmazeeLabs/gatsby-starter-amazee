{"version":3,"sources":["webpack:///./src/components/List/index.tsx","webpack:///./src/templates/person.tsx","webpack:///./node_modules/@apollo/react-hooks/lib/react-hooks.esm.js"],"names":["List","items","length","map","item","key","id","className","to","path","label","PersonPage","t","useTranslation","useQuery","gql","variables","data","error","loading","console","log","Person","name","films","film","title","episodeId","DynamicPersonPage","OperationData","options","context","this","isMounted","previousOptions","prototype","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","QueryData","_super","_a","onNewData","_this","call","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","networkStatus","ready","called","undefined","fetchData","ssr","obs","getCurrentResult","afterExecute","_b","lazy","handleErrorOrCompleted","bind","ssrInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","subscription","obsQuery","subscribe","next","previousResult","_error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","Object","assign","currentResult","partial","errors","graphQLErrors","partialRefetch","resetQueryStoreErrors","onCompleted","onError","unsubscribe","useBaseQuery","x","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","Promise","resolve","then","memoFn","ref","memo","value","queryResult","MutationData","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","mutationContext","_c","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","ignoreResults","updateResult","isMostRecentMutation","SubscriptionData","initialize","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","RenderPromises","queryPromises","Map","queryInfoTrie","observable","props","lookupQueryInfo","queryInstance","finish","seen","set","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","get","has","variablesString","JSON","stringify","info"],"mappings":"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","file":"component---src-templates-person-tsx-27fbd776796e39b8d0b5.js","sourcesContent":["import * as React from 'react';\nimport Link from '../Link';\n\n/**\n * A simple list of links.\n */\nconst List: React.FC<{\n  /**\n   * List item definitions, containing a unique id, a label and a path.\n   */\n  items: {\n    id: string;\n    label: string;\n    path: string;\n  }[];\n}> = ({ items }) =>\n  items.length ? (\n    <ul>\n      {items.map(item => (\n        <li\n          key={item.id}\n          className=\"border-solid border-gray-300 border-b-2 last:border-b-0\"\n        >\n          <Link to={item.path} className=\"block px-5 py-2 hover:bg-gray-100\">\n            {item.label}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  ) : (\n    <p className=\"text-center italic\">No results found.</p>\n  );\n\nexport default List;\n","import * as React from 'react';\nimport { RouteComponentProps, Router } from '@reach/router';\nimport List from '../components/List';\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nimport { useTranslation } from 'react-i18next';\n\ninterface PersonPageProps extends RouteComponentProps {\n  id?: number;\n}\n\ninterface PersonResult {\n  id: string;\n  name: string;\n  films: Film[];\n}\n\ninterface Film {\n  id: string;\n  title: string;\n  episodeId: string;\n}\n\n/**\n * The main visual template for the person page, including an apollo query.\n */\nconst PersonPage: React.FC<PersonPageProps> = ({ id }) => {\n  const { t } = useTranslation();\n\n  // Apollo`s useQuery hook allows us to query for additional data at runtime\n  // from the client.\n  // TODO: Learn about querying data at runtime.\n  // https://www.gatsbyjs.org/docs/static-query/#usestaticquery\n  const { data, error, loading } = useQuery<{ Person: PersonResult }>(\n    gql`\n      query PersonQuery($id: ID!) {\n        Person(id: $id) {\n          id\n          name\n          films {\n            id\n            title\n            episodeId\n          }\n        }\n      }\n    `,\n    { variables: { id } }\n  );\n\n  if (loading) {\n    return <p className=\"text-center italic\">Loading ...</p>;\n  }\n\n  if (error) {\n    console.log(error);\n  }\n\n  return data && data.Person ? (\n    <>\n      <h1 className=\"mb-8\">\n        {t('Films with \"{{name}}\"', { name: data.Person.name })}\n      </h1>\n      <List\n        items={data.Person.films.map((film: Film) => ({\n          id: film.id,\n          label: `${film.title} (Episode ${film.episodeId})`,\n          path: `/films/${film.id}`,\n        }))}\n      />\n    </>\n  ) : (\n    <p className=\"text-center italic\">\n      An error occurred. We are very sorry ...\n    </p>\n  );\n};\n\n/**\n * The person template entry point.\n * Parses the path and calls the PersonPage component with the url arguments.\n */\nconst DynamicPersonPage: React.FC = () => (\n  <Router>\n    <PersonPage path=\"persons/:id\" />\n    {/*FIXME: Remove language prefix before path is handed over to the router.*/}\n    <PersonPage path=\":language/persons/:id\" />\n  </Router>\n);\n\nexport default DynamicPersonPage;\n","import \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.function.bind\";\nimport { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        onNewData = _a.onNewData;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.runLazy = false;\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.onNewData();\n    };\n\n    _this.getExecuteResult = function () {\n      var result = _this.getQueryResult();\n\n      _this.startQuerySubscription();\n\n      return result;\n    };\n\n    _this.obsRefetch = function (variables) {\n      return _this.currentObservable.query.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.query.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.query.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.query.subscribeToMore(options);\n    };\n\n    _this.onNewData = onNewData;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    var obs = this.currentObservable.query;\n    var currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  };\n\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var ssrDisabled = this.getOptions().ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    var result;\n\n    if (this.ssrInitiated()) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getExecuteResult) || ssrLoading;\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context,\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    var _a, _b;\n\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n\n      if (this.ssrInitiated()) {\n        (_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.renderPromises) === null || _b === void 0 ? void 0 : _b.registerSSRObservable(this.currentObservable.query, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions)[\"catch\"](function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function next(_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n\n        _this.onNewData();\n      },\n      error: function error(_error) {\n        _this.resubscribeToQuery();\n\n        if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading || !equal(_error, _this.previousData.error)) {\n          _this.previousData.error = _error;\n\n          _this.onNewData();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n\n  QueryData.prototype.getQueryResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n\n    if (options.skip) {\n      result = __assign(__assign({}, result), {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n      var error = currentResult.error,\n          data = currentResult.data;\n\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n\n      result = __assign(__assign({}, result), {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n\n      if (loading) {\n        var previousData = this.previousData.result && this.previousData.result.data;\n        result.data = previousData && data ? __assign(__assign({}, previousData), data) : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n\n        if (partialRefetch && !data && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    this.currentObservable.query && this.currentObservable.query.resetQueryStoreErrors();\n    return result;\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n    var _a = this.previousData.result,\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError;\n\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var observable = this.currentObservable.query;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nfunction useDeepMemo(memoFn, key) {\n  var ref = useRef();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n\n  return ref.current.value;\n}\n\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n  var queryData = queryDataRef.current || new QueryData({\n    options: updatedOptions,\n    context: context,\n    onNewData: function onNewData() {\n      if (!queryData.ssrInitiated()) {\n        Promise.resolve().then(forceUpdate);\n      } else {\n        forceUpdate();\n      }\n    }\n  });\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  return result;\n}\n\nfunction useQuery(query, options) {\n  return useBaseQuery(query, options, false);\n}\n\nfunction useLazyQuery(query, options) {\n  return useBaseQuery(query, options, true);\n}\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      })[\"catch\"](function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _a = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\n\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\n\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };"],"sourceRoot":""}