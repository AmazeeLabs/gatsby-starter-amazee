{"version":3,"sources":["webpack:///./src/components/List/index.tsx","webpack:///./src/templates/characters-character.tsx"],"names":["List","items","length","map","item","key","id","className","to","path","label","PersonQuery","withPageWrapper","data","t","useTranslation","description","name","swapi","person","sectionTitle","headTitle","films","film","title","episodeId"],"mappings":"6FAAA,4BAiCeA,IAlBV,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACHA,EAAMC,OACJ,0BACGD,EAAME,KAAI,SAACC,GAAD,OACT,sBACEC,IAAKD,EAAKE,GACVC,UAAU,2DAEV,gBAAC,IAAD,CAAMC,GAAIJ,EAAKK,KAAMF,UAAU,qCAC5BH,EAAKM,YAMd,qBAAGH,UAAU,sBAAb,uB,uLCnBSI,EAAc,aAgEZC,uBA/BV,SAAC,GAAa,IAAXC,EAAW,EAAXA,KACEC,EAAMC,cAAND,EACR,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEE,YAAaF,EAAE,+CAAgD,CAC7DG,KAAMJ,EAAKK,MAAMC,OAAOF,SAG5B,gBAAC,IAAD,CACEV,UAAU,OACVa,aAAcN,EAAE,gCAChBO,UAAWR,EAAKK,MAAMC,OAAOF,MAE5BH,EAAE,yCAA0C,CAC3CG,KAAMJ,EAAKK,MAAMC,OAAOF,QAG5B,gBAAC,IAAD,CACEhB,MAAOY,EAAKK,MAAMC,OAAOG,MAAMnB,KAAI,SAACoB,GAAD,MAAW,CAC5CjB,GAAIiB,EAAKjB,GACTI,MAAUa,EAAKC,MAAV,KAAoBV,EAAE,iCAAkC,CAC3DW,UAAWF,EAAKE,YADb,IAGLhB,KAAM,UAAUc,EAAKjB","file":"component---src-templates-characters-character-tsx-9899e1863327c2b37614.js","sourcesContent":["import * as React from 'react';\nimport Link from 'components/Link';\n\n/**\n * A simple list of links.\n */\nconst List: React.FC<{\n  /**\n   * List item definitions, containing a unique id, a label and a path.\n   */\n  items: {\n    id: string;\n    label: string;\n    path: string;\n  }[];\n}> = ({ items }) =>\n  items.length ? (\n    <ul>\n      {items.map((item) => (\n        <li\n          key={item.id}\n          className=\"border-solid border-gray-300 border-b-2 last:border-b-0\"\n        >\n          <Link to={item.path} className=\"block px-5 py-2 hover:bg-gray-100\">\n            {item.label}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  ) : (\n    <p className=\"text-center italic\">No results found.</p>\n  );\n\nexport default List;\n","import * as React from 'react';\nimport { graphql } from 'gatsby';\nimport { useTranslation } from 'react-i18next';\nimport List from 'components/List';\nimport Meta from 'components/Meta';\nimport OneColumn from 'components/layouts/OneColumn';\nimport Title from 'components/Title';\nimport withPageWrapper from 'hocs/withPageWrapper';\n\n// By exporting this query, we tell Gatsby to execute it with the context\n// variables provided as arguments and to fill it with the query result.\nexport const PersonQuery = graphql`\n  query PersonQuery($id: ID!) {\n    swapi {\n      person(id: $id) {\n        id\n        name\n        films {\n          id\n          title\n          episodeId\n        }\n      }\n    }\n  }\n`;\n\n/**\n * The main visual template for the person page, including an apollo query.\n */\nconst PersonPage: React.FC<{\n  data: {\n    swapi: {\n      person: {\n        id: string;\n        name: string;\n        films: {\n          id: string;\n          title: string;\n          episodeId: string;\n        }[];\n      };\n    };\n  };\n}> = ({ data }) => {\n  const { t } = useTranslation();\n  return (\n    <OneColumn>\n      <Meta\n        description={t('swapi.pages.characters-character.description', {\n          name: data.swapi.person.name,\n        })}\n      />\n      <Title\n        className=\"mb-8\"\n        sectionTitle={t('swapi.pages.characters.title')}\n        headTitle={data.swapi.person.name}\n      >\n        {t('swapi.pages.characters-character.title', {\n          name: data.swapi.person.name,\n        })}\n      </Title>\n      <List\n        items={data.swapi.person.films.map((film) => ({\n          id: film.id,\n          label: `${film.title} (${t('swapi.pages.films-film.episode', {\n            episodeId: film.episodeId,\n          })})`,\n          path: `/films/${film.id}`,\n        }))}\n      />\n    </OneColumn>\n  );\n};\n\nexport default withPageWrapper(PersonPage);\n"],"sourceRoot":""}