{"version":3,"sources":["webpack:///./src/components/pages/characters/CharacterTemplate/index.tsx","webpack:///./src/templates/characters-character.tsx","webpack:///./src/components/containers/List/index.tsx"],"names":["CharacterTemplate","character","t","useTranslation","OneColumn","Meta","description","name","Title","sectionTitle","headTitle","films","List","items","map","film","id","label","title","episodeId","path","PersonQuery","withPageWrapper","data","api","person","length","item","key","className","to","noLinkStyles"],"mappings":"+OA0DeA,EAlCuD,SAAC,GAEjE,IADJC,EACI,EADJA,UAEQC,EAAMC,cAAND,EACR,OACE,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,YAAaJ,EAAE,6CAA8C,CAC3DK,KAAMN,EAAUM,SAGpB,kBAACC,EAAA,EAAD,CACEC,aAAcP,EAAE,8BAChBQ,UAAWT,EAAUM,MAEpBL,EAAE,uCAAwC,CACzCK,KAAMN,EAAUM,QAGnBN,EAAUU,OACT,kBAACC,EAAA,EAAD,CACEC,MAAOZ,EAAUU,MAAMG,KAAI,SAACC,GAAD,MAAW,CACpCC,GAAID,EAAKC,GACTC,MAAUF,EAAKG,MAAV,KAAoBhB,EAAE,+BAAgC,CACzDiB,UAAWJ,EAAKI,YADb,IAGLC,KAAM,UAAUL,EAAKC,W,YCzCpBK,EAAc,YAkBZC,uBAHV,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACHA,EAAKC,IAAIC,OAAS,kBAAC,EAAD,CAAmBxB,UAAWsB,EAAKC,IAAIC,SAAa,kC,kCCzBxE,qCAqCeb,IAtBV,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACHA,EAAMa,OACJ,4BACGb,EAAMC,KAAI,SAACa,GAAD,OACT,wBACEC,IAAKD,EAAKX,GACVa,UAAU,2DAEV,kBAAC,IAAD,CACEC,GAAIH,EAAKP,KACTS,UAAU,oCACVE,cAAY,GAEXJ,EAAKV,YAMd,uBAAGY,UAAU,sBAAb","file":"component---src-templates-characters-character-tsx-edfd2d50943eee0b4909.js","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport List from 'components/containers/List';\nimport Meta from 'components/common/Meta';\nimport OneColumn from 'components/layouts/OneColumn';\nimport Title from 'components/common/Title';\nimport { graphql } from 'gatsby';\nimport { CharacterFragment } from '../../../../../typings/graphql/build';\n\nexport const fragment = graphql`\n  fragment Character on api_Person {\n    id\n    name\n    films {\n      id\n      title\n      episodeId\n    }\n  }\n`;\n\n/**\n * The main template for character pages.\n */\nconst CharacterTemplate: React.FC<{ character: CharacterFragment }> = ({\n  character,\n}) => {\n  const { t } = useTranslation();\n  return (\n    <OneColumn>\n      <Meta\n        description={t('api.pages.characters-character.description', {\n          name: character.name,\n        })}\n      />\n      <Title\n        sectionTitle={t('api.pages.characters.title')}\n        headTitle={character.name}\n      >\n        {t('api.pages.characters-character.title', {\n          name: character.name,\n        })}\n      </Title>\n      {character.films && (\n        <List\n          items={character.films.map((film) => ({\n            id: film.id,\n            label: `${film.title} (${t('api.pages.films-film.episode', {\n              episodeId: film.episodeId,\n            })})`,\n            path: `/films/${film.id}`,\n          }))}\n        />\n      )}\n    </OneColumn>\n  );\n};\n\nexport default CharacterTemplate;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport CharacterTemplate from 'components/pages/characters/CharacterTemplate';\nimport withPageWrapper from 'hocs/withPageWrapper';\nimport { CharacterDetailsQuery } from 'typings/graphql/build';\n\n// By exporting this query, we tell Gatsby to execute it with the context\n// variables provided as arguments and to fill it with the query result.\n// https://www.gatsbyjs.org/docs/page-query/\nexport const PersonQuery = graphql`\n  query CharacterDetails($id: ID!) {\n    api {\n      person: Person(id: $id) {\n        ...Character\n      }\n    }\n  }\n`;\n\n/**\n * The main visual template for the person page, including an apollo query.\n */\nconst Page: React.FC<{\n  data: CharacterDetailsQuery;\n}> = ({ data }) =>\n  data.api.person ? <CharacterTemplate character={data.api.person} /> : <div />;\n\nexport default withPageWrapper(Page);\n","import React from 'react';\nimport Link from 'components/common/Link';\n\n/**\n * A simple list of links.\n */\nconst List: React.FC<{\n  /**\n   * List item definitions, containing a unique id, a label and a path.\n   */\n  items: {\n    id: string;\n    label: string;\n    path: string;\n  }[];\n}> = ({ items }) =>\n  items.length ? (\n    <ul>\n      {items.map((item) => (\n        <li\n          key={item.id}\n          className=\"border-solid border-gray-300 border-b-2 last:border-b-0\"\n        >\n          <Link\n            to={item.path}\n            className=\"block px-5 py-2 hover:bg-gray-100\"\n            noLinkStyles\n          >\n            {item.label}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  ) : (\n    <p className=\"text-center italic\">No results found.</p>\n  );\n\nexport default List;\n"],"sourceRoot":""}