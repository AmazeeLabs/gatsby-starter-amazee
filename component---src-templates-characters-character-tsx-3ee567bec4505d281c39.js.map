{"version":3,"sources":["webpack:///./src/components/pages/characters/CharacterTemplate/index.tsx","webpack:///./src/templates/characters-character.tsx","webpack:///./src/components/containers/List/index.tsx"],"names":["CharacterTemplate","character","t","useTranslation","OneColumn","Meta","description","name","Title","className","sectionTitle","headTitle","List","items","films","map","film","id","label","title","episodeId","path","PersonQuery","withPageWrapper","data","swapi","person","length","item","key","to","noLinkStyles"],"mappings":"+OAiDeA,EA/BV,SAAC,GAAkB,IAAhBC,EAAgB,EAAhBA,UACEC,EAAMC,cAAND,EACR,OACE,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,YAAaJ,EAAE,+CAAgD,CAC7DK,KAAMN,EAAUM,SAGpB,kBAACC,EAAA,EAAD,CACEC,UAAU,OACVC,aAAcR,EAAE,gCAChBS,UAAWV,EAAUM,MAEpBL,EAAE,yCAA0C,CAC3CK,KAAMN,EAAUM,QAGpB,kBAACK,EAAA,EAAD,CACEC,MAAOZ,EAAUa,MAAMC,KAAI,SAACC,GAAD,MAAW,CACpCC,GAAID,EAAKC,GACTC,MAAUF,EAAKG,MAAV,KAAoBjB,EAAE,iCAAkC,CAC3DkB,UAAWJ,EAAKI,YADb,IAGLC,KAAM,UAAUL,EAAKC,W,YClClBK,EAAc,aAmCZC,uBAFV,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAAc,kBAAC,EAAD,CAAmBvB,UAAWuB,EAAKC,MAAMC,a,kCCzC5D,qCAqCed,IAtBV,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACHA,EAAMc,OACJ,4BACGd,EAAME,KAAI,SAACa,GAAD,OACT,wBACEC,IAAKD,EAAKX,GACVR,UAAU,2DAEV,kBAAC,IAAD,CACEqB,GAAIF,EAAKP,KACTZ,UAAU,oCACVsB,cAAY,GAEXH,EAAKV,YAMd,uBAAGT,UAAU,sBAAb","file":"component---src-templates-characters-character-tsx-3ee567bec4505d281c39.js","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport List from 'components/containers/List';\nimport Meta from 'components/common/Meta';\nimport OneColumn from 'components/layouts/OneColumn';\nimport Title from 'components/common/Title';\nimport { Person } from 'schema/Person';\nimport { Film } from 'schema/Film';\n\nexport type CharacterProp = Required<Omit<Person, 'films'>> & {\n  films: Required<Omit<Film, 'characters'>>[];\n};\n\n/**\n * The main template for character pages.\n */\nconst CharacterTemplate: React.FC<{\n  character: CharacterProp;\n}> = ({ character }) => {\n  const { t } = useTranslation();\n  return (\n    <OneColumn>\n      <Meta\n        description={t('swapi.pages.characters-character.description', {\n          name: character.name,\n        })}\n      />\n      <Title\n        className=\"mb-8\"\n        sectionTitle={t('swapi.pages.characters.title')}\n        headTitle={character.name}\n      >\n        {t('swapi.pages.characters-character.title', {\n          name: character.name,\n        })}\n      </Title>\n      <List\n        items={character.films.map((film) => ({\n          id: film.id,\n          label: `${film.title} (${t('swapi.pages.films-film.episode', {\n            episodeId: film.episodeId,\n          })})`,\n          path: `/films/${film.id}`,\n        }))}\n      />\n    </OneColumn>\n  );\n};\n\nexport default CharacterTemplate;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport CharacterTemplate from 'components/pages/characters/CharacterTemplate';\nimport withPageWrapper from 'hocs/withPageWrapper';\n\n// By exporting this query, we tell Gatsby to execute it with the context\n// variables provided as arguments and to fill it with the query result.\n// https://www.gatsbyjs.org/docs/page-query/\nexport const PersonQuery = graphql`\n  query PersonQuery($id: ID!) {\n    swapi {\n      person(id: $id) {\n        id\n        name\n        films {\n          id\n          title\n          episodeId\n        }\n      }\n    }\n  }\n`;\n\n/**\n * The main visual template for the person page, including an apollo query.\n */\nconst Page: React.FC<{\n  data: {\n    swapi: {\n      person: {\n        id: string;\n        name: string;\n        films: {\n          id: string;\n          title: string;\n          episodeId: string;\n        }[];\n      };\n    };\n  };\n}> = ({ data }) => <CharacterTemplate character={data.swapi.person} />;\n\nexport default withPageWrapper(Page);\n","import React from 'react';\nimport Link from 'components/common/Link';\n\n/**\n * A simple list of links.\n */\nconst List: React.FC<{\n  /**\n   * List item definitions, containing a unique id, a label and a path.\n   */\n  items: {\n    id: string;\n    label: string;\n    path: string;\n  }[];\n}> = ({ items }) =>\n  items.length ? (\n    <ul>\n      {items.map((item) => (\n        <li\n          key={item.id}\n          className=\"border-solid border-gray-300 border-b-2 last:border-b-0\"\n        >\n          <Link\n            to={item.path}\n            className=\"block px-5 py-2 hover:bg-gray-100\"\n            noLinkStyles\n          >\n            {item.label}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  ) : (\n    <p className=\"text-center italic\">No results found.</p>\n  );\n\nexport default List;\n"],"sourceRoot":""}