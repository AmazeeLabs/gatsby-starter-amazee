{"version":3,"sources":["webpack:///./src/components/List/index.tsx","webpack:///./src/templates/films-film.tsx"],"names":["List","items","length","map","item","key","id","className","to","path","label","FilmQuery","withPageWrapper","data","t","useTranslation","description","title","swapi","film","sectionTitle","episodeId","characters","character","name"],"mappings":"6FAAA,4BAiCeA,IAlBV,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACHA,EAAMC,OACJ,0BACGD,EAAME,KAAI,SAACC,GAAD,OACT,sBACEC,IAAKD,EAAKE,GACVC,UAAU,2DAEV,gBAAC,IAAD,CAAMC,GAAIJ,EAAKK,KAAMF,UAAU,qCAC5BH,EAAKM,YAMd,qBAAGH,UAAU,sBAAb,uB,qLCnBSI,EAAY,aA6DVC,uBA/BV,SAAC,GAAa,IAAXC,EAAW,EAAXA,KACEC,EAAMC,cAAND,EACR,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CACEE,YAAaF,EAAE,qCAAsC,CACnDG,MAAOJ,EAAKK,MAAMC,KAAKF,UAG3B,gBAAC,IAAD,CAAOV,UAAU,OAAOa,aAAcN,EAAE,4BACrCD,EAAKK,MAAMC,KAAKF,OAElBJ,EAAKK,MAAMC,KAAKE,WACf,qBAAGd,UAAU,QACVO,EAAE,iCAAkC,CACnCO,UAAWR,EAAKK,MAAMC,KAAKE,aAIjC,0BAAKP,EAAE,sCACP,gBAAC,IAAD,CACEb,MAAOY,EAAKK,MAAMC,KAAKG,WAAWnB,KAAI,SAACoB,GAAD,MAAgB,CACpDjB,GAAIiB,EAAUjB,GACdI,MAAOa,EAAUC,KACjBf,KAAM,eAAec,EAAUjB","file":"component---src-templates-films-film-tsx-cfc545628a2e81878922.js","sourcesContent":["import * as React from 'react';\nimport Link from 'components/Link';\n\n/**\n * A simple list of links.\n */\nconst List: React.FC<{\n  /**\n   * List item definitions, containing a unique id, a label and a path.\n   */\n  items: {\n    id: string;\n    label: string;\n    path: string;\n  }[];\n}> = ({ items }) =>\n  items.length ? (\n    <ul>\n      {items.map((item) => (\n        <li\n          key={item.id}\n          className=\"border-solid border-gray-300 border-b-2 last:border-b-0\"\n        >\n          <Link to={item.path} className=\"block px-5 py-2 hover:bg-gray-100\">\n            {item.label}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  ) : (\n    <p className=\"text-center italic\">No results found.</p>\n  );\n\nexport default List;\n","import * as React from 'react';\nimport { graphql } from 'gatsby';\nimport { useTranslation } from 'react-i18next';\nimport List from 'components/List';\nimport Meta from 'components/Meta';\nimport OneColumn from 'components/layouts/OneColumn';\nimport Title from 'components/Title';\nimport withPageWrapper from 'hocs/withPageWrapper';\n\n// By exporting this query, we tell Gatsby to execute it with the context\n// variables provided as arguments and to fill it with the query result.\nexport const FilmQuery = graphql`\n  query FilmQuery($id: ID!) {\n    swapi {\n      film(id: $id) {\n        id\n        title\n        episodeId\n        characters {\n          id\n          name\n        }\n      }\n    }\n  }\n`;\n\nconst FilmPage: React.FC<{\n  data: {\n    swapi: {\n      film: {\n        id: string;\n        title: string;\n        episodeId: number;\n        characters: {\n          id: string;\n          name: string;\n        }[];\n      };\n    };\n  };\n}> = ({ data }) => {\n  const { t } = useTranslation();\n  return (\n    <OneColumn>\n      <Meta\n        description={t('swapi.pages.films-film.description', {\n          title: data.swapi.film.title,\n        })}\n      />\n      <Title className=\"mb-2\" sectionTitle={t('swapi.pages.films.title')}>\n        {data.swapi.film.title}\n      </Title>\n      {data.swapi.film.episodeId && (\n        <p className=\"mb-8\">\n          {t('swapi.pages.films-film.episode', {\n            episodeId: data.swapi.film.episodeId,\n          })}\n        </p>\n      )}\n      <h2>{t('swapi.pages.films-film.characters')}</h2>\n      <List\n        items={data.swapi.film.characters.map((character) => ({\n          id: character.id,\n          label: character.name,\n          path: `/characters/${character.id}`,\n        }))}\n      />\n    </OneColumn>\n  );\n};\n\nexport default withPageWrapper(FilmPage);\n"],"sourceRoot":""}