{"version":3,"sources":["webpack:///./src/components/pages/films/FilmTemplate/index.tsx","webpack:///./src/templates/films-film.tsx","webpack:///./src/components/containers/List/index.tsx"],"names":["FilmTemplate","film","t","useTranslation","OneColumn","Meta","description","title","Title","className","sectionTitle","episodeId","characters","List","items","map","character","id","label","name","path","FilmQuery","withPageWrapper","data","api","length","item","key","to","noLinkStyles"],"mappings":"6OAsDeA,EAjCwC,SAAC,GAAa,IAAXC,EAAW,EAAXA,KAChDC,EAAMC,cAAND,EACR,OACE,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,YAAaJ,EAAE,mCAAoC,CACjDK,MAAON,EAAKM,UAGhB,kBAACC,EAAA,EAAD,CAAOC,UAAU,OAAOC,aAAcR,EAAE,0BACrCD,EAAKM,OAEPN,EAAKU,WACJ,uBAAGF,UAAU,QACVP,EAAE,+BAAgC,CACjCS,UAAWV,EAAKU,aAItB,4BAAKT,EAAE,oCACND,EAAKW,YACJ,kBAACC,EAAA,EAAD,CACEC,MAAOb,EAAKW,WAAWG,KAAI,SAACC,GAAD,MAAgB,CACzCC,GAAID,EAAUC,GACdC,MAAOF,EAAUG,KACjBC,KAAM,eAAeJ,EAAUC,W,YCrC9BI,EAAY,aAeVC,uBAHV,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACHA,EAAKC,IAAIvB,KAAO,kBAAC,EAAD,CAAcA,KAAMsB,EAAKC,IAAIvB,OAAW,kC,kCCtB1D,qCAqCeY,IAtBV,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACHA,EAAMW,OACJ,4BACGX,EAAMC,KAAI,SAACW,GAAD,OACT,wBACEC,IAAKD,EAAKT,GACVR,UAAU,2DAEV,kBAAC,IAAD,CACEmB,GAAIF,EAAKN,KACTX,UAAU,oCACVoB,cAAY,GAEXH,EAAKR,YAMd,uBAAGT,UAAU,sBAAb","file":"component---src-templates-films-film-tsx-1d79b96323a7a655da2b.js","sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport List from 'components/containers/List';\nimport Meta from 'components/common/Meta';\nimport OneColumn from 'components/layouts/OneColumn';\nimport Title from 'components/common/Title';\nimport { graphql } from 'gatsby';\nimport { FilmFragment } from 'typings/graphql/build';\n\nexport const fragment = graphql`\n  fragment Film on api_Film {\n    id\n    title\n    episodeId\n    characters {\n      id\n      name\n    }\n  }\n`;\n\nconst FilmTemplate: React.FC<{ film: FilmFragment }> = ({ film }) => {\n  const { t } = useTranslation();\n  return (\n    <OneColumn>\n      <Meta\n        description={t('api.pages.films-film.description', {\n          title: film.title,\n        })}\n      />\n      <Title className=\"mb-2\" sectionTitle={t('api.pages.films.title')}>\n        {film.title}\n      </Title>\n      {film.episodeId && (\n        <p className=\"mb-8\">\n          {t('api.pages.films-film.episode', {\n            episodeId: film.episodeId,\n          })}\n        </p>\n      )}\n      <h2>{t('api.pages.films-film.characters')}</h2>\n      {film.characters && (\n        <List\n          items={film.characters.map((character) => ({\n            id: character.id,\n            label: character.name,\n            path: `/characters/${character.id}`,\n          }))}\n        />\n      )}\n    </OneColumn>\n  );\n};\n\nexport default FilmTemplate;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport FilmTemplate from 'components/pages/films/FilmTemplate';\nimport withPageWrapper from 'hocs/withPageWrapper';\nimport { FilmDetailsQuery } from 'typings/graphql/build';\n\n// By exporting this query, we tell Gatsby to execute it with the context\n// variables provided as arguments and to fill it with the query result.\n// https://www.gatsbyjs.org/docs/page-query/\nexport const FilmQuery = graphql`\n  query FilmDetails($id: ID!) {\n    api {\n      film: Film(id: $id) {\n        ...Film\n      }\n    }\n  }\n`;\n\nconst Page: React.FC<{\n  data: FilmDetailsQuery;\n}> = ({ data }) =>\n  data.api.film ? <FilmTemplate film={data.api.film} /> : <div />;\n\nexport default withPageWrapper(Page);\n","import React from 'react';\nimport Link from 'components/common/Link';\n\n/**\n * A simple list of links.\n */\nconst List: React.FC<{\n  /**\n   * List item definitions, containing a unique id, a label and a path.\n   */\n  items: {\n    id: string;\n    label: string;\n    path: string;\n  }[];\n}> = ({ items }) =>\n  items.length ? (\n    <ul>\n      {items.map((item) => (\n        <li\n          key={item.id}\n          className=\"border-solid border-gray-300 border-b-2 last:border-b-0\"\n        >\n          <Link\n            to={item.path}\n            className=\"block px-5 py-2 hover:bg-gray-100\"\n            noLinkStyles\n          >\n            {item.label}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  ) : (\n    <p className=\"text-center italic\">No results found.</p>\n  );\n\nexport default List;\n"],"sourceRoot":""}